#!/usr/bin/env sh

SELF="$0"
if [ "-x$NODENAME" == "-x" ]; then
    NODENAME="`basename $SELF`"
fi

LOG="/tmp/distel.call.log"
ERL_CALL=`find /Users/t4/Library/Erlang/Current/lib/erlang/lib -name erl_call`

print_usage() {
    data=$(sed -n '/^usage: /,$p' "$SELF")
    printf '%s\n' "$data"
}

check_result() {
    if [ "$RESULT" == "$1" ]; then
        echo 'done.'
    else
        echo "ERROR: $RESULT"
        exit 1
    fi
}

alter_path() {
    PATHFUNC="add_patha"
    case "$1" in
        "-pz")
            PATHFUNC="add_pathz";;
        -ap|-zp)
            PATHFUNC="del_path"
    esac
    if [ "-x$2" == "-x" ]; then
        ARGV="\"`pwd`/ebin\""
    else
        ARGV="\"`pwd`/$2\""
    fi
    do_erl_call "code" "$PATHFUNC" "$ARGV"
    check_result "true"
}

find_mod() {
    do_erl_call "code" "which" "$1"
    echo "$RESULT"
}

stop_node() {
    do_erl_call "erlang" "halt" "0"
    sleep 1
    check_running
    if [ "$?" != "0" ]; then
        echo 'done.'
    else
        EPMD=$(epmd -names)
        echo "ERROR: unable to kill node - $EPMD"
    fi
}

ensure_running() {
    check_running
    if [ "$?" != "0" ]; then
        erl -sname $NODENAME -detached
        sleep 1
        ensure_running
    fi
}

check_running() {
    NODEUP=$(epmd -names | grep "$NODENAME" | wc -l | awk '/.*/ { print $NF }')
    if [ "$NODEUP" != "1" ]; then
        return 1
    else
        return 0
    fi
}

do_erl_call() {
    ensure_running
    sleep 1
    RESULT=$($ERL_CALL -sname "$NODENAME" -a "$1 $2 [$3]" 2>&1)
    echo "[$NODENAME] $1:$2($3) -> $RESULT. `date +'[%d/%m/%y %H:%M:%S]'`" >> "$LOG"
}

case "$1" in
    -X|--stop)
        stop_node
        exit 0
esac

case "$1" in
    '-h')
        print_usage ;;
    -pa|-pz|-ap|-zp)
        if [ $# == 1 ]; then
            alter_path "$1" ""
        else
            alter_path "$1" "$2"
        fi;;
    --setd)
        echo "file:set_cwd(\"`pwd`\")." | $ERL_CALL -sname $NODENAME -e | awk '/.*/ { print "ok" }';;
    --getd)
        echo "element(2, file:get_cwd())." | $ERL_CALL -sname $NODENAME -e | awk '/(\{ok, )(.*)\}/ { print substr($NF, 1, length($NF)-1) }';;
    --sync)
        echo "sync:go()." | $ERL_CALL -sname $NODENAME -e | awk '/.*/ { print "ok" }';;
    --which|--find)
        find_mod "$2" ;;
    --shell)
        erl -sname distel_remsh_$$ -remsh "$NODENAME@`hostname -s`" ;;
    --cmd|--pipe-cmd)
        $ERL_CALL -sname $NODENAME -e | awk '/.*/ { print $0 }' ;;
    --stop)
        $ERL_CALL -sname "$NODENAME" -a init halt []
        echo "done.";;
    -L|--show-log)
        cat "$LOG" ;;
    -C|--clear-log)
        rm -f "$LOG"; touch "$LOG"
esac

exit

usage: distel [options]
-pa                     appends $CWD/ebin to the code path
-pz                     prepends $CWD/ebin to the code path
-ap/-zp                 deletes $CWD/ebin from the code path
--which/--find [Mod]    looks for Mod on the code path
--shell                 launches a remote shell
--cmd/--pipe-cmd        pipes an expression from stdin to the distel node for eval
--show-log/-L           print a log of issued commands (and results)
--clear-log/-C          clear the log of issued commands
--getd/--setd           get/set pwd
--sync                  enable sync
